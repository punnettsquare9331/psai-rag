from uuid import uuid4
import os
from dotenv import load_dotenv
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.document_loaders import ArxivLoader, DirectoryLoader
from langchain_community.vectorstores import FAISS
from langchain_openai import OpenAIEmbeddings, ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate
from operator import itemgetter
from langchain.schema.output_parser import StrOutputParser
from langchain.schema.runnable import RunnablePassthrough
from langchain_mongodb import MongoDBAtlasVectorSearch
from langchain_community.llms import OpenAI
from pymongo import MongoClient
from langchain.chains import RetrievalQA
import gradio as gr
from gradio.themes.base import Base
import asyncio

load_dotenv()

os.environ['OPENAI_API_KEY'] = os.getenv('OPENAI_API_KEY')
os.environ["LANGCHAIN_TRACING_V2"] = "true"
os.environ["LANGCHAIN_PROJECT"] = f"AIE1 - LangGraph - {uuid4().hex[0:8]}"
os.environ["LANGCHAIN_API_KEY"] = os.getenv('LANGCHAIN_API_KEY')
os.environ['MONGODB_ATLAS_CLUSTER_URI'] = os.getenv('MONGODB_ATLAS_CLUSTER_URI')



uri_string = 'mongodb+srv://akulaakshay30:5olJLfl5IOXxerLs@test-cluster.eo3hc.mongodb.net'
client = MongoClient(os.environ['MONGODB_ATLAS_CLUSTER_URI'])

DB_NAME = "phenx_data"
COLLECTION_NAME = "PhenX_langchain_loader"
# ATLAS_VECTOR_SEARCH_INDEX_NAME = "langchain-test-index-vectorstores"

# loader = DirectoryLoader( './sample_files', glob="./*.txt", show_progress=True)
# data = loader.load()

# Instantiate the Embedding Model
embeddings = OpenAIEmbeddings(model="text-embedding-3-small",openai_api_key=os.environ['OPENAI_API_KEY'])

MONGODB_COLLECTION = client[DB_NAME][COLLECTION_NAME]

# vectorStore = MongoDBAtlasVectorSearch.from_documents(data, embeddings, collection=MONGODB_COLLECTION )

vectorStore = MongoDBAtlasVectorSearch( collection=MONGODB_COLLECTION, embedding=embeddings, index_name='default' )

def query_data(query):
    # Convert question to vector using OpenAI embeddings
    # Perform Atlas Vector Search using Langchain's vectorStore
    # similarity_search returns MongoDB documents most similar to the query    
    docs = vectorStore.similarity_search(query, K=1)
    as_output = docs[0].page_content
    # Leveraging Atlas Vector Search paired with Langchain's QARetriever
    # Define the LLM that we want to use -- note that this is the Language Generation Model and NOT an Embedding Model
    # If it's not specified (for example like in the code below),
    # then the default OpenAI model used in LangChain is OpenAI GPT-3.5-turbo, as of August 30, 2023
    llm = OpenAI(openai_api_key=os.environ['OPENAI_API_KEY'], temperature=0)
    # Get VectorStoreRetriever: Specifically, Retriever for MongoDB VectorStore.
    # Implements _get_relevant_documents which retrieves documents relevant to a query.
    retriever = vectorStore.as_retriever()
    # Load "stuff" documents chain. Stuff documents chain takes a list of documents,
    # inserts them all into a prompt and passes that prompt to an LLM.
    qa = RetrievalQA.from_chain_type(llm, chain_type="stuff", retriever=retriever)
    # Execute the chain
    retriever_output = qa.run(query)
    # Return Atlas Vector Search output, and output generated using RAG Architecture
    return as_output, retriever_output


with gr.Blocks(theme=Base(), title="Question Answering App using Vector Search + RAG") as demo:
    gr.Markdown(
        """
        # Question Answering App using Atlas Vector Search + RAG Architecture
        """)
    textbox = gr.Textbox(label="Enter your Question:")
    with gr.Row():
        button = gr.Button("Submit", variant="primary")
    with gr.Column():
        output1 = gr.Textbox(lines=1, max_lines=10, label="Output with just Atlas Vector Search (returns text field as is):")
        output2 = gr.Textbox(lines=1, max_lines=10, label="Output generated by chaining Atlas Vector Search to Langchain's RetrieverQA + OpenAI LLM:")
    button.click(query_data, textbox, outputs=[output1, output2])
demo.launch()